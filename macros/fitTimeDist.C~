#include "TFile.h"
#include "TStyle.h"
#include "TH1.h"
#include "TH2.h"
#include "TF1.h"
#include "TTree.h" 
#include "TCanvas.h"
#include "TLegend.h"
#include "TColor.h"
#include "TLatex.h"
#include "TGraphAsymmErrors.h"
#include <iostream>
#include "TGaxis.h"
#include "TPaletteAxis.h"
#include "MyLib.h"
#include <string>
#include <fstream>

void fitTimeDist(std::string FileIn, std::string detector, Float_t bound)
{
	float XMax, YMax, Xshift, Yshift, AmpMean, AmpSigma;
	std::string TimeMCP1, TimeMCP2, AmpMean_str, AmpSigma_str; 
	TFile *f = TFile::Open(FileIn.c_str());
	TTree *h4 = (TTree*)f->Get("h4");
	
	std::string pathToOutput = "/afs/cern.ch/user/c/cquarant/www/";
	
	h4->GetEntry(0);
	std::string Gain = std::to_string((int)h4->GetLeaf("CHGain")->GetValue(0));
	std::string Energy = std::to_string((int)h4->GetLeaf("Energy")->GetValue(0));
	std::string RunStats = Energy+"Gev_G"+Gain;

	//Shift between Hodo planes
	Xshift = HodoPlaneShift(h4, detector, pathToOutput, RunStats, "X");
	Yshift = HodoPlaneShift(h4, detector, pathToOutput, RunStats, "Y");
	
	//Selection on distance of hitting position from the center of the detector
	AmplitudeProfilesFit(h4, detector, pathToOutput, RunStats, bound, &XMax, &YMax);

	std::string PosSel = "(fabs(X[0]-("+std::to_string(XMax)+"))<"+std::to_string(bound)+" || fabs(X[1]-("+std::to_string(XMax)+")-("+std::to_string(Xshift)+"))<"+std::to_string(bound)+") && (fabs(Y[0]-("+std::to_string(YMax)+"))<"+std::to_string(bound)+" || fabs(Y[1]-("+std::to_string(YMax)+")-("+std::to_string(Yshift)+"))<"+std::to_string(bound)+")";
	
	//Selection on MCP1 time & amplitude
	TimeMCP1 = std::to_string(MeanTimeMCP(h4, PosSel, pathToOutput+"fitTimeDist/", RunStats, "MCP1"));
	std::string MCP1Sel = "amp_max[MCP1]>100 && fabs(time[MCP1]-("+TimeMCP1+"))<7";

	//Selection on Amplitude
	AmplitudeHist(h4, detector, PosSel+" && "+MCP1Sel, pathToOutput, RunStats, &AmpMean, &AmpSigma);
	AmpMean_str = std::to_string(AmpMean);
	AmpSigma_str = std::to_string(AmpSigma);	
	std::string AmpSel = "fabs(amp_max["+detector+"]-("+AmpMean_str+"))<5*"+AmpSigma_str;	
	
	std::string tD_APD_MCP1_Sel = PosSel + " && " + MCP1Sel + " && " + AmpSel;
	cout << tD_APD_MCP1_Sel << endl;

	//plot and fit APD_MCP1 time distribution
	TH1F* tD_APD_MCP1 = new TH1F("tD_APD_MCP1", "", 1000, -20, 20);
	if(Energy == "20" && Gain!="200") tD_APD_MCP1->SetBins(750, -40, 40);
	if(Energy == "20" && Gain=="200") tD_APD_MCP1->SetBins(1500, -40, 40);
	h4->Draw(("fit_time["+detector+"]-time[MCP1]>>tD_APD_MCP1").c_str(), tD_APD_MCP1_Sel.c_str());
	
	float Xfirst = tD_APD_MCP1->GetXaxis()->GetBinCenter(tD_APD_MCP1->GetMaximumBin())-1;
	float Xlast = tD_APD_MCP1->GetXaxis()->GetBinCenter(tD_APD_MCP1->GetMaximumBin())+1;

	TCanvas* c0 = new TCanvas("c0", "c0");
	tD_APD_MCP1->GetXaxis()->SetRangeUser(Xfirst, Xlast);
	tD_APD_MCP1->GetXaxis()->SetTitle(("time["+detector+"]-time[MCP1] (ns)").c_str());
	tD_APD_MCP1->GetYaxis()->SetTitle("events");
	tD_APD_MCP1->Fit("gaus", "", "", Xfirst, Xlast);
	tD_APD_MCP1->Draw();
	
	c0->SaveAs((pathToOutput+"fitTimeDist/FinalTimeDistribution/Time_"+detector+"-MCP1_"+RunStats+".png").c_str());
	c0->SaveAs((pathToOutput+"fitTimeDist/FinalTimeDistribution/Time_"+detector+"-MCP1_"+RunStats+".pdf").c_str());
	
	

	//plot and fit APD_MCP1 time distribution wo cuts
	TH1F* tD1 = new TH1F("tD1", "", 500, -5, 10);
	h4->Draw(("fit_time["+detector+"]-time[MCP1]>>tD1").c_str());
	
	TCanvas* c1 = new TCanvas("c1", "c1");
	tD1->GetXaxis()->SetRangeUser(Xfirst, Xlast);
	tD1->Fit("gaus", "", "", Xfirst, Xlast);
	tD1->Draw();
	c1->SaveAs((pathToOutput+"fitTimeDist/RawTimeDistribution/TimeNoCut_"+detector+"-MCP1_"+RunStats+".png").c_str());
	c1->SaveAs((pathToOutput+"fitTimeDist/RawTimeDistribution/TimeNoCut_"+detector+"-MCP1_"+RunStats+".pdf").c_str());

	



	//Selection on MCP2 time && amplitude
	TimeMCP2 = std::to_string(MeanTimeMCP(h4, PosSel, pathToOutput+"fitTimeDist/", RunStats, "MCP2"));
	std::string MCP2Sel = "amp_max[MCP2]>100 && fabs(time[MCP2]-("+TimeMCP2+"))<7";

	std::string tD_APD_MCP2_Sel = PosSel + " && " + MCP2Sel + " && " + AmpSel;
	cout << tD_APD_MCP2_Sel << endl;

	//plot and fit APD_MCP2 time distribution
	TH1F* tD_APD_MCP2 = new TH1F("tD_APD_MCP2", "", 2000, -20, 20);
	if(Energy == "20" && Gain!="200") tD_APD_MCP2->SetBins(750, -40, 40);
	if(Energy == "20" && Gain=="200") tD_APD_MCP2->SetBins(1500, -40, 40);
	h4->Draw(("fit_time["+detector+"]-time[MCP2]>>tD_APD_MCP2").c_str(), tD_APD_MCP2_Sel.c_str());
	
	Xfirst = tD_APD_MCP2->GetXaxis()->GetBinCenter(tD_APD_MCP2->GetMaximumBin())-1;
	Xlast = tD_APD_MCP2->GetXaxis()->GetBinCenter(tD_APD_MCP2->GetMaximumBin())+1;

	TCanvas* c2 = new TCanvas("c2", "c2");
	tD_APD_MCP2->GetXaxis()->SetRangeUser(Xfirst, Xlast);
	tD_APD_MCP2->GetXaxis()->SetTitle(("time["+detector+"]-time[MCP2] (ns)").c_str());
	tD_APD_MCP2->GetYaxis()->SetTitle("events");
	tD_APD_MCP2->Fit("gaus", "", "", Xfirst, Xlast);
	tD_APD_MCP2->Draw();

	c2->SaveAs((pathToOutput+"fitTimeDist/FinalTimeDistribution/Time_"+detector+"-MCP2_"+RunStats+".png").c_str());
	c2->SaveAs((pathToOutput+"fitTimeDist/FinalTimeDistribution/Time_"+detector+"-MCP2_"+RunStats+".pdf").c_str());

	


	//Selection on both MCP time & amplitude
	std::string tD_APD_MCP_Mean_Sel = PosSel + " && " + MCP1Sel + " && " + MCP2Sel + " && " + AmpSel;
	cout << tD_APD_MCP_Mean_Sel << endl;
	
	//plot and fit APD_MCP_Mean time distribution
	
	TH1F* tD_APD_MCP_Mean = new TH1F("tD_APD_MCP_Mean", "", 4000, -40, 40);
	if(Energy == "20" && Gain!="200") tD_APD_MCP_Mean->SetBins(750, -40, 40);
	if(Energy == "20" && Gain=="200") tD_APD_MCP_Mean->SetBins(1500, -40, 40);
	h4->Draw(("fit_time["+detector+"]-0.5*(time[MCP1]+time[MCP2])>>tD_APD_MCP_Mean").c_str(), tD_APD_MCP_Mean_Sel.c_str());
	
	Xfirst = tD_APD_MCP_Mean->GetXaxis()->GetBinCenter(tD_APD_MCP_Mean->GetMaximumBin())-1;
	Xlast = tD_APD_MCP_Mean->GetXaxis()->GetBinCenter(tD_APD_MCP_Mean->GetMaximumBin())+1;

	TCanvas* c3 = new TCanvas("c3", "c3");
	tD_APD_MCP_Mean->GetXaxis()->SetRangeUser(Xfirst, Xlast);
	tD_APD_MCP_Mean->GetXaxis()->SetTitle(("time["+detector+"]-timeMean (ns)").c_str());
	tD_APD_MCP_Mean->GetYaxis()->SetTitle("events");
	tD_APD_MCP_Mean->Fit("gaus", "", "", Xfirst, Xlast);
	tD_APD_MCP_Mean->Draw();

	c3->SaveAs((pathToOutput+"fitTimeDist/FinalTimeDistribution/Time_"+detector+"-MCP_Mean_"+RunStats+".png").c_str());
	c3->SaveAs((pathToOutput+"fitTimeDist/FinalTimeDistribution/Time_"+detector+"-MCP_Mean_"+RunStats+".pdf").c_str());

	cout << tD_APD_MCP1->GetFunction("gaus")->GetParError(1) << endl;
	cout << tD_APD_MCP1->GetBinContent(tD_APD_MCP1->GetMaximumBin()) << "    " << tD_APD_MCP1->GetBinError(tD_APD_MCP1->GetMaximumBin()) << endl;

}

/*
	//fit with two gaussian
	TF1 *fitFunc = new TF1("fitFunc", "[0]*exp(-((x-[1])*(x-[1]))/2*([2]*[2])) + [3]*exp(-((x-[4])*(x-[4]))/2*([5]*[5]))", Xfirst+0.6, Xlast-0.6); 
	
	fitFunc->SetParName(0,"A0");
	fitFunc->SetParName(1,"Mean0");
	fitFunc->SetParName(2,"Sigma0");
	fitFunc->SetParName(3,"A1");
	fitFunc->SetParName(4,"Mean1");
	fitFunc->SetParName(5,"Sigma1");

	fitFunc->SetParLimits(0, 0, tD->GetMaximum()*1.05);
	fitFunc->SetParLimits(2, 0, 1);
	fitFunc->SetParLimits(3, 0, tD->GetMaximum()*1.05);
	fitFunc->SetParLimits(5, 0, 1);

	fitFunc->SetParameter(0, tD->GetMaximum()*0.5);
	fitFunc->SetParameter(1, 4.5);
	fitFunc->SetParameter(2, 0.5);

	fitFunc->SetParameter(3, tD->GetMaximum()*0.5);
	fitFunc->SetParameter(4, 4.5);
	fitFunc->SetParameter(5, 0.2);

	tD->Fit("fitFunc", "", "", Xfirst+0.6, Xlast-0.6);
	tD->Draw();
	
	//draw components
	TF1* gaus0 = new TF1("gaus0", "gaus", Xfirst+0.6, Xlast-0.6);
	TF1* gaus1 = new TF1("gaus1", "gaus", Xfirst+0.6, Xlast-0.6);

	gaus0->SetParameter(0, fitFunc->GetParameter("A0"));
	gaus0->SetParameter(1, fitFunc->GetParameter("Mean0"));
	gaus0->SetParameter(2, fitFunc->GetParameter("Sigma0"));

	gaus1->SetParameter(0, fitFunc->GetParameter("A1"));
	gaus1->SetParameter(1, fitFunc->GetParameter("Mean1"));
	gaus1->SetParameter(2, fitFunc->GetParameter("Sigma1"));

	gaus0->SetLineColor(kBlue);
	gaus0->Draw("SAME");

	gaus1->SetLineColor(kGreen);
	gaus1->Draw("SAME");
	*/	
